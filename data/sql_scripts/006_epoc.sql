/*
EPOC Table
----------
Description
 */

DO
$$
    BEGIN
        /* Vue matérialisée finale */
--         DROP TABLE IF EXISTS atlas.t_epoc;
        CREATE TABLE IF NOT EXISTS atlas.t_epoc
        (
            id_epoc   INTEGER PRIMARY KEY,
            id_ff     VARCHAR,
            status    VARCHAR,
            rang_rsv  INT,
            id_area   INT REFERENCES ref_geo.l_areas (id_area),
            area_code VARCHAR,
            geom      GEOMETRY(point, 4326),
            geojson   JSONB GENERATED ALWAYS AS (st_asgeojson(geom)::JSONB ) STORED
        );
        -- ALTER TABLE atlas.t_epoc OWNER TO gnadm;
        COMMENT ON COLUMN atlas.t_epoc.id_epoc IS 'EPOC unique ID';
        COMMENT ON COLUMN atlas.t_epoc.id_ff IS 'EPOC Official name from Faune-France';
        COMMENT ON COLUMN atlas.t_epoc.status IS 'EPOC status : Officiel vs Réserve';
        COMMENT ON COLUMN atlas.t_epoc.rang_rsv IS 'EPOC rang ("Réserve" only)';
        COMMENT ON COLUMN atlas.t_epoc.id_area IS 'Grid area id, foreign key to ref_geo.l_areas';
        COMMENT ON COLUMN atlas.t_epoc.area_code IS 'Grid area code';
        COMMENT ON COLUMN atlas.t_epoc.geom IS 'Geolocation (Point, 4326)';
        COMMENT ON COLUMN atlas.t_epoc.geojson IS 'Geolocation as geojson (autogenerated from geom)';
        CREATE UNIQUE INDEX IF NOT EXISTS idx_epoc_id_epoc ON atlas.t_epoc (id_epoc);
        CREATE INDEX IF NOT EXISTS gidx_epoc ON atlas.t_epoc USING gist (geom);
        CREATE INDEX IF NOT EXISTS idx_epoc_id_area ON atlas.t_epoc (id_area);
        CREATE INDEX IF NOT EXISTS idx_epoc_status ON atlas.t_epoc (status);
        INSERT INTO
            atlas.t_epoc (id_epoc, id_ff, status, rang_rsv, id_area, area_code, geom)
        SELECT
            epoc.id_epoc
          , epoc.id_ff
          , epoc.stt_ssu
          , epoc.rng_rsr
          , l_areas.id_area
          , replace(l_areas.area_code, '10kmL93', '')
          , st_transform(epoc.geom, 4326)
            FROM
                tmp.epoc
                    JOIN ref_geo.l_areas ON st_intersects(st_transform(epoc.geom, 4326), l_areas.geom)
                    AND l_areas.id_type = ref_geo.get_id_area_type('ATLAS_GRID')
        ON CONFLICT (id_epoc) DO NOTHING;
        CLUSTER atlas.t_epoc
            USING gidx_epoc;


        DROP MATERIALIZED VIEW IF EXISTS atlas.mv_realized_epoc;
        CREATE MATERIALIZED VIEW atlas.mv_realized_epoc AS
        (
        WITH
            t1 AS (
                SELECT DISTINCT
                    mv_forms_for_atlas.id_form_universal
                  , mv_data_for_atlas.project_code
                  , mv_forms_for_atlas.id_area
                  , mv_forms_for_atlas.timelength_secs
                  , mv_forms_for_atlas.timestamp_start::DATE AS date
                  , mv_forms_for_atlas.timestamp_start::TIME AS time
                  , mv_forms_for_atlas.geom
                    FROM
                        atlas.mv_data_for_atlas
                            JOIN atlas.mv_forms_for_atlas
                                 ON mv_data_for_atlas.id_form_universal = mv_forms_for_atlas.id_form_universal
                    WHERE
                          is_epoc
                      AND project_code IN ('EPOC', 'EPOC-ODF')
                      AND timelength_secs BETWEEN (60 * 5) AND (60 * 8)
            )
        SELECT
            row_number() OVER () AS id
          , t1.*
            FROM
                t1);
        CREATE UNIQUE INDEX IF NOT EXISTS idx_realized_epoc_id_form_universal ON atlas.mv_realized_epoc (id_form_universal, project_code);
        CREATE INDEX gidx_realized_epoc ON atlas.mv_realized_epoc USING gist (geom);
        COMMIT;
    END
$$
;



GRANT SELECT ON ALL TABLES IN SCHEMA atlas to odfapp;