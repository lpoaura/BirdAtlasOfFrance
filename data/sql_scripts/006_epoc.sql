/*
EPOC Table
----------
Description
 */
DO $$
BEGIN
    /* Vue matérialisée finale */
    DROP TABLE IF EXISTS atlas.t_epoc;
    CREATE TABLE atlas.t_epoc (
        id_epoc integer PRIMARY KEY,
        id_ff varchar,
        status varchar,
        rang_rsv int,
        id_area int REFERENCES ref_geo.l_areas (id_area ),
        area_code varchar,
        geom geometry(point, 4326 ),
        geojson jsonb GENERATED ALWAYS AS (st_asgeojson (geom )::jsonb ) STORED
    );
    -- ALTER TABLE atlas.t_epoc OWNER TO gnadm;
    COMMENT ON COLUMN atlas.t_epoc.id_epoc IS 'EPOC unique ID';
    COMMENT ON COLUMN atlas.t_epoc.id_ff IS 'EPOC Official name from Faune-France';
    COMMENT ON COLUMN atlas.t_epoc.status IS 'EPOC status : Officiel vs Réserve';
    COMMENT ON COLUMN atlas.t_epoc.rang_rsv IS 'EPOC rang ("Réserve" only)';
    COMMENT ON COLUMN atlas.t_epoc.id_area IS 'Grid area id, foreign key to ref_geo.l_areas';
    COMMENT ON COLUMN atlas.t_epoc.area_code IS 'Grid area code';
    COMMENT ON COLUMN atlas.t_epoc.geom IS 'Geolocation (Point, 4326)';
    COMMENT ON COLUMN atlas.t_epoc.geojson IS 'Geolocation as geojson (autogenerated from geom)';
    CREATE UNIQUE INDEX idx_epoc_id_epoc ON atlas.t_epoc (id_epoc);
    CREATE INDEX gidx_epoc ON atlas.t_epoc USING gist (geom);
    CREATE INDEX idx_epoc_id_area ON atlas.t_epoc (id_area);
    CREATE INDEX idx_epoc_status ON atlas.t_epoc (status);
    INSERT INTO atlas.t_epoc (id_epoc, id_ff, status, rang_rsv, id_area, area_code, geom)
    SELECT
        epoc.id_epoc,
        epoc.id_ff,
        epoc.stt_ssu,
        epoc.rng_rsr,
        l_areas.id_area,
        replace(l_areas.area_code, '10kmL93', ''),
        st_transform (epoc.geom, 4326)
    FROM
        tmp.epoc
        JOIN ref_geo.l_areas ON st_intersects (st_transform (epoc.geom, 4326), l_areas.geom)
            AND l_areas.id_type = ref_geo.get_id_area_type ('ATLAS_GRID');
    CLUSTER atlas.t_epoc
    USING gidx_epoc;
    COMMIT;
END
$$;


